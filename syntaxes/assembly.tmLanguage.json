{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Gero Assembly",
  "fileTypes": [
    "asb"
  ],
  "scopeName": "source.assembly",
  "patterns": [
    {
      "name": "keyword.control.module.assembly",
      "match": "\\bmodule\\b"
    },
    {
      "name": "meta.module.assembly",
      "begin": "\\bmodule\\s+",
      "end": "\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.module.assembly"
        }
      },
      "patterns": [
        {
          "include": "#variables"
        }
      ]
    },
    {
      "name": "meta.constant.assembly",
      "begin": "(constant)\\s+([a-zA-Z0-9_]+)\\s*=\\s*",
      "end": "(\\$[0-9A-Fa-f]{2,4})",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.assembly"
        },
        "2": {
          "name": "variable.constant.assembly"
        }
      },
      "endCaptures": {
        "1": {
          "name": "constant.numeric.hex.assembly"
        }
      }
    },
    {
      "name": "meta.array.assembly",
      "begin": "(data(8|16))\\s+([a-zA-Z0-9_]+)\\s*=\\s*\\{",
      "end": "\\}",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.assembly"
        },
        "3": {
          "name": "variable.array.assembly"
        }
      },
      "patterns": [
        {
          "include": "#literals"
        }
      ]
    },
    {
      "name": "keyword.control.cpu.assembly",
      "match": "\\b(rti|hlt)\\b"
    },
    {
      "name": "support.function.mnemonic.memory.assembly",
      "match": "\\b(mov|mov8|movh|movl|jeq|jne|jlt|jgt|jle|jge|psh|pop|cal|ret)\\b"
    },
    {
      "name": "support.function.mnemonic.arithmetic.assembly",
      "match": "\\b(add|sub|mul|inc|dec|lsh|rsh|and|or|xor|not)\\b"
    },
    {
      "match": "^(\\b[a-zA-Z_][0-9a-zA-Z_]*\\b):",
      "name": "entity.name.label.assembly",
      "captures": {
        "1": {
          "name": "entity.name.label.assembly"
        }
      }
    },
    {
      "include": "#bracket_expression"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#registers"
    },
    {
      "include": "#literals"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#memaddress"
    }
  ],
  "repository": {
    "literals": {
      "patterns": [
        {
          "name": "constant.numeric.hex.assembly",
          "match": "\\$[0-9A-Fa-f]{2,4}"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "entity.name.type.register.assembly",
          "match": "(r([0-8])|acu|ip|sp|fp|mb|im)"
        }
      ]
    },
    "bracket_expression": {
      "patterns": [
        {
          "name": "meta.brackets.assembly",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#registers"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#memaddress"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#grouped_expression"
            }
          ]
        }
      ]
    },
    "grouped_expression": {
      "patterns": [
        {
          "name": "meta.parenthesis.assembly",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#registers"
            },
            {
              "include": "#literals"
            },
            {
              "include": "#memaddress"
            },
            {
              "include": "#operators"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assembly",
          "match": "[+\\-*/]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b![a-zA-Z_][0-9a-zA-Z_]*\\b",
          "name": "variable.other.assembly"
        }
      ]
    },
    "memaddress": {
      "patterns": [
        {
          "name": "storage.memaddress.assembly",
          "match": "&((r([0-8])|acu|ip|sp|fp|mb|im)|\\$[0-9A-Fa-f]{2,4}|\\b![a-zA-Z_][0-9a-zA-Z_]*\\b|\\b[0-9A-Fa-f]{4}\\b|\\[([^\\]]+)\\])",
          "captures": {
            "2": {
              "patterns": [
                {
                  "include": "#registers"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#bracket_expression"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#variables"
                }
              ]
            }
          }
        }
      ]
    }
  }
}